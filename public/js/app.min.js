app || (app = {});

( function(window,document,undefined){

app.AnimalModel = Backbone.Model.extend({

urlRoot: function(){
return window.Misc.urlFull( Route.route('animal.index'));
},
idAttribute: 'id',
defaults:{
'animal_numero':'',
'animal_nombre':'',
'animal_especie':'',
'animal_raza': '',
'animal_pedigree':'',
'animal_macho':true,
'animal_nacimiento': moment().format('YYYY-MM-DD'),
'animal_peso_nacido':'',
'animal_padre':'',
'animal_madre': '',
'animal_indice_corporal':'',
'animal_lote':'',
'animal_observaciones':'',
'animal_rdfi':'',
'animal_activo':true,
'animal_foto':''

}
});
})(this, this.document);
app || (app = {});

( function(window,document,undefined){

	app.EspeciesModel = Backbone.Model.extend({
		
		urlRoot: function(){
			return window.Misc.urlFull( Route.route('especies.index'));
		},
		idAttribute: 'id',
		defaults:{
			'especie_nombre':'',
			'especie_activa': true
		}
	});
})(this, this.document);
app || (app = {});

( function(window,document,undefined){

	app.HatoModel = Backbone.Model.extend({
		
		urlRoot: function(){
			return window.Misc.urlFull( Route.route('hato.index'));
		},
		idAttribute: 'id',
		defaults:{
			'hato_nombre':'',
			'hato_descripcion':'',
			'hato_color':'',
			'hato_activo': true
		}
	});
})(this, this.document);
app || (app = {});

( function(window,document,undefined){

app.LoteModel = Backbone.Model.extend({

urlRoot: function(){
return window.Misc.urlFull( Route.route('lote.index'));
},
idAttribute: 'id',
defaults:{
'lote_nombre':'',
'lote_descripcion':'',
'lote_color':'',
'lote_activo': true,
'lote_superficie':'',
'lote_hato':'',
'lote_alerta_sin_pesaje':0,
'lote_alerta_peso_inferior':0,
'lote_alerta_peso_superior':0

}
});
})(this, this.document);
app || (app = {});

( function(window,document,undefined){

	app.RazasModel = Backbone.Model.extend({
		
		urlRoot: function(){
			return window.Misc.urlFull( Route.route('razas.index'));
		},
		idAttribute: 'id',
		defaults:{
			'raza_nombre':'',
			'raza_activa': true
		}
	});
})(this, this.document);
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateAnimalView = Backbone.View.extend({

        el: '#animal-create',
        template: _.template( ($('#add-animal-tpl').html() || '') ),
        events: {
            'submit #form-animal': 'onStore'
        },
        parameters: {
            callback: ''
        },

        initialize : function(opts) {      
          
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            this.msgSuccess = 'Animal Guardado!!'; 
            this.$wraperForm = this.$('#render-form-animal');

            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
  
        ready: function () {
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

             if( typeof window.initComponent.initDatePicker == 'function' )
                window.initComponent.initDatePicker();
        },

        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

      
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }
                
                var _this = this,
                    stuffToDo = {
                        'toShow' : function() {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('animal.show', { animal: resp.id })) );            
                        },

                        'default' : function() {
                            alertify.success(_this.msgSuccess);
                        }
                    };

                if (stuffToDo[this.parameters.callback]) {
                    stuffToDo[this.parameters.callback]();
                } else {
                    stuffToDo['default']();
                }
            }
        }
    });

})(jQuery, this, this.document);
app || (app = {});

(function ($, window, document, undefined) {

    app.MainAnimalView = Backbone.View.extend({

        el: '#animal-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$animalSearchTable = this.$('#animal-search-table');

            this.$animalSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('animal.index') ),
                columns: [
                    { data: 'id', name: 'id'},
                    { data: 'animal_numero', name: 'animal_numero' },
                    { data: 'animal_nombre', name: 'animal_nombre' },
                    { data: 'especie_nombre', name: 'especie_nombre'},
                    { data: 'raza_nombre', name: 'raza_nombre'},
                    { data: 'lote_nombre', name: 'lote_nombre'},
                    { data: 'animal_activo', name: 'animal_activo'}
                    
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nuevo Animal',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('animal.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: "10%",
                        render: function( data, type, full, row ){
                            return '<a href="'+ window.Misc.urlFull( Route.route('animal.show', {animal: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 6,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);
/*
    Descripcion: Script utilizado para el apartado CREATE y UPDATE del Modulo Especies
    @Author: Kevin Romero
*/

app || (app = {});

(function ($, window, document, undefined) {

    app.CreateEspeciesView = Backbone.View.extend({

        el: '#especie-create',
        template: _.template( ($('#add-especie-tpl').html() || '') ),
        events: {
            'submit #form-especie': 'onStore'
        },
        parameters: {
            callback: ''
        },

        initialize : function(opts) {      
          
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            this.msgSuccess = 'Especie Guardada!'; 
            this.$wraperForm = this.$('#render-form-especie');

            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
  
        ready: function () {
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

      
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }
                
                var _this = this,
                    stuffToDo = {
                        'toShow' : function() {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('especies.show', { especies: resp.id })) );            
                        },

                        'default' : function() {
                            alertify.success(_this.msgSuccess);
                        }
                    };

                if (stuffToDo[this.parameters.callback]) {
                    stuffToDo[this.parameters.callback]();
                } else {
                    stuffToDo['default']();
                }
            }
        }
    });

})(jQuery, this, this.document);

app || (app = {});

(function ($, window, document, undefined) {

    app.MainEspeciesView = Backbone.View.extend({

        el: '#especies-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$especiesSearchTable = this.$('#especies-search-table');

            this.$especiesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('especies.index') ),
                columns: [
                    { data: 'id', name: 'id'},
                    { data: 'especie_nombre', name: 'especie_nombre' },
                    { data: 'especie_activa', name: 'especie_activa' }
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nueva especie',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('especies.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: "10%",
                        render: function( data, type, full, row ){
                            return '<a href="'+ window.Misc.urlFull( Route.route('especies.show', {especies: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateHatoView = Backbone.View.extend({

        el: '#hato-create',
        template: _.template( ($('#add-hato-tpl').html() || '') ),
        events: {
            'submit #form-hato': 'onStore'
        },
        parameters: {
            callback: ''
        },

        initialize : function(opts) {      
          
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            this.msgSuccess = 'Hato Guardado!!'; 
            this.$wraperForm = this.$('#render-form-hato');

            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
  
        ready: function () {
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

      
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }
                
                var _this = this,
                    stuffToDo = {
                        'toShow' : function() {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('hato.show', { hato: resp.id })) );            
                        },

                        'default' : function() {
                            alertify.success(_this.msgSuccess);
                        }
                    };

                if (stuffToDo[this.parameters.callback]) {
                    stuffToDo[this.parameters.callback]();
                } else {
                    stuffToDo['default']();
                }
            }
        }
    });

})(jQuery, this, this.document);
app || (app = {});

(function($, window, document, undefined){
 app.MainHatoView = Backbone.View.extend({

        el: '#hato-main',

        initialize : function() {

            this.$hatoSearchTable = this.$('#hato-search-table');

            this.$hatoSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('hato.index') ),
                columns: [
                    { data: 'id', name: 'id'},
                    { data: 'hato_nombre', name: 'hato_nombre' },
                    { data: 'hato_descripcion', name: 'hato_descripcion' },
                    { data: 'hato_color', name: 'hato_color'},
                    { data: 'hato_activo', name: 'hato_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nuevo Hato',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('hato.create') ) )
                        }
                    }
                ],
                columnDefs: [
                {
                        targets: 0,
                        width: "10%",
                        render: function( data, type, full, row ){
                            return '<a href="'+ window.Misc.urlFull( Route.route('hato.show', {hato: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 4,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    }
                ]
            });
        }
    });
})(jQuery, this, this.document);
/**
* Class AppRouter  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.UserLoginView = Backbone.View.extend({

        el: '#login-box',

        /**
        * Constructor Method
        */
        initialize : function() {

            //Init Attributes
            this.$loginForm = $('#form-login-account');
            this.$loginForm.validator();
        },

        /*
        * Render View Element
        */
        render: function(){
            //
        }
    });


})(jQuery, this, this.document);

app || (app = {});

(function ($, window, document, undefined) {

    app.CreateLoteView = Backbone.View.extend({

        el: '#lote-create',
        template: _.template( ($('#add-lote-tpl').html() || '') ),
        events: {
            'submit #form-lote': 'onStore'
        },
        parameters: {
            callback: ''
        },

        initialize : function(opts) {      
          
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            this.msgSuccess = 'Lote Guardado!!'; 
            this.$wraperForm = this.$('#render-form-lote');

            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
  
        ready: function () {
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

      
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }
                
                var _this = this,
                    stuffToDo = {
                        'toShow' : function() {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('lote.show', { lote: resp.id })) );            
                        },

                        'default' : function() {
                            alertify.success(_this.msgSuccess);
                        }
                    };

                if (stuffToDo[this.parameters.callback]) {
                    stuffToDo[this.parameters.callback]();
                } else {
                    stuffToDo['default']();
                }
            }
        }
    });

})(jQuery, this, this.document);
app || (app = {});

(function($, window, document, undefined){
 app.MainLoteView = Backbone.View.extend({

        el: '#lote-main',

        initialize : function() {

            this.$loteSearchTable = this.$('#lote-search-table');

            this.$loteSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('lote.index') ),
                columns: [
                    { data: 'id', name: 'id'},
                    { data: 'lote_nombre', name: 'lote_nombre' },
                    { data: 'lote_descripcion', name: 'lote_descripcion' },
                    { data: 'lote_color', name: 'lote_color'},
                    { data: 'lote_activo', name: 'lote_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nueva lote',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('lote.create') ) )
                        }
                    }
                ],
                columnDefs: [
                {
                        targets: 0,
                        width: "10%",
                        render: function( data, type, full, row ){
                            return '<a href="'+ window.Misc.urlFull( Route.route('lote.show', {lote: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 4,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    }
                ]
            });
        }
    });
})(jQuery, this, this.document);
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateRazaView = Backbone.View.extend({

        el: '#raza-create',
        template: _.template( ($('#add-raza-tpl').html() || '') ),
        events: {
            'submit #form-raza': 'onStore'
        },
        parameters: {
            callback: ''
        },

        initialize : function(opts) {      
          
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            this.msgSuccess = 'Raza Guardada!'; 
            this.$wraperForm = this.$('#render-form-raza');

            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
  
        ready: function () {
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

      
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }
                
                var _this = this,
                    stuffToDo = {
                        'toShow' : function() {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('razas.show', { razas: resp.id })) );            
                        },

                        'default' : function() {
                            alertify.success(_this.msgSuccess);
                        }
                    };

                if (stuffToDo[this.parameters.callback]) {
                    stuffToDo[this.parameters.callback]();
                } else {
                    stuffToDo['default']();
                }
            }
        }
    });

})(jQuery, this, this.document);
app || (app = {});

(function($, window, document, undefined){
 app.MainRazasView = Backbone.View.extend({

        el: '#razas-main',

        initialize : function() {

            this.$razasSearchTable = this.$('#razas-search-table');

            this.$razasSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('razas.index') ),
                columns: [
                    { data: 'id', name: 'id'},
                    { data: 'raza_nombre', name: 'raza_nombre' },
                    { data: 'raza_activa', name: 'raza_activa' }
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nueva raza',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('razas.create') ) )
                        }
                    }
                ],
                columnDefs: [
                {
                        targets: 0,
                        width: "10%",
                        render: function( data, type, full, row ){
                            return '<a href="'+ window.Misc.urlFull( Route.route('razas.show', {razas: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    }
                ]
            });
        }
    });
})(jQuery, this, this.document);
/**
* Class AppRouter  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.AppRouter = new( Backbone.Router.extend({
        routes : {
            'login(/)': 'getLogin',

            //Rutas Modulo Especies
            'especies(/)': 'getEspeciesMain',
            'especies/create(/)': 'getEspeciesCreate',
            'especies/:especies/edit(/)': 'getEspeciesEdit',

            //Rutas Modulo Razas
            'razas(/)': 'getRazasMain',
            'razas/create(/)': 'getRazasCreate',
            'razas/:razas/edit(/)': 'getRazasEdit',

            //Rutas Modulo Hato
            'hato(/)': 'getHatoMain',
            'hato/create(/)': 'getHatoCreate',
            'hato/:hato/edit(/)': 'getHatoEdit',

            //Rutas Modulo Lote
            'lote(/)': 'getLoteMain',
            'lote/create(/)': 'getLoteCreate',
            'lote/:lote/edit(/)': 'getLoteEdit',

            //Rutas Modulo Animal
            'animal(/)': 'getAnimalMain',
            'animal/create(/)': 'getAnimalCreate',
            'animal/:animal/edit(/)': 'getAnimalEdit'

        },

        /**
        * Constructor Method
        */
        initialize : function ( opts ){
            // Initialize resources
      	},

        /**
        * Start Backbone history
        */
        start: function () {
            var config = { pushState: true };

            if( document.domain.search("localhost") != '-1')
                config.root = '/pecuario/public/';

            Backbone.history.start( config );
        },

        /**
        * show view login
        * @param String show
        */
        getLogin: function () {

            if ( this.loginView instanceof Backbone.View ){
                this.loginView.stopListening();
                this.loginView.undelegateEvents();
            }

            this.loginView = new app.UserLoginView( );
        },

        //Modulo de Especies

        getEspeciesMain: function () {

            if ( this.mainEspeciesView instanceof Backbone.View ){
                this.mainEspeciesView.stopListening();
                this.mainEspeciesView.undelegateEvents();
            }

            this.mainEspeciesView = new app.MainEspeciesView();
        },

        getEspeciesCreate: function(){
            this.especiesModel = new app.EspeciesModel();

            if ( this.createEspeciesView instanceof Backbone.View ){
                this.createEspeciesView.stopListening();
                this.createEspeciesView.undelegateEvents();
            }

            this.createEspeciesView = new app.CreateEspeciesView({ model: this.especiesModel, parameters: { callback: 'toShow' } });
            this.createEspeciesView.render();
        },

        getEspeciesEdit: function(especies){
            this.especiesModel = new app.EspeciesModel();
            this.especiesModel.set({'id': especies}, {silent: true});
             if ( this.createEspeciesView instanceof Backbone.View ){
                this.createEspeciesView.stopListening();
                this.createEspeciesView.undelegateEvents();
            }

            this.createEspeciesView = new app.CreateEspeciesView({ model: this.especiesModel, parameters: { callback: 'toShow' } });
            this.especiesModel.fetch();
        },

        // Modulo de Razas

        getRazasMain: function(){
            if (this.mainRazasView instanceof Backbone.View){
                this.mainRazasView.stopListening();
                this.mainRazasView.undelegateEvents();
            }
            this.mainRazasView = new app.MainRazasView();
        },

        getRazasCreate: function(){
            this.razasModel = new app.RazasModel();
            if(this.createRazaView instanceof Backbone.View){
                this.createRazaView.stopListening();
                this.createRazaView.undelegateEvents();
            }
            this.createRazaView = new app.CreateRazaView({ model: this.razasModel, parameters: { callback: "toShow" } });
            this.createRazaView.render();
        },

        getRazasEdit: function(razas){
            this.razasModel = new app.RazasModel();
            this.razasModel.set({'id': razas},{silent: true});
                if( this.createRazaView instanceof Backbone.View){
                    this.createRazaView.stopListening();
                    this.createRazaView.undelegateEvents();
                }
                this.createRazaView = new app.CreateRazaView({ model: this.razasModel, parameters: {callback: 'toShow'}});
                this.razasModel.fetch();
        },

        // Modulo de Hato
        getHatoMain: function(){
            if (this.mainHatoView instanceof Backbone.View){
                this.mainHatoView.stopListening();
                this.mainHatoView.undelegateEvents();
            }
            this.mainHatoView = new app.MainHatoView();
        },

         getHatoCreate: function(){
            this.hatoModel = new app.HatoModel();
            if(this.createHatoView instanceof Backbone.View){
                this.createHatoView.stopListening();
                this.createHatoView.undelegateEvents();
            }
            this.createHatoView = new app.CreateHatoView({ model: this.hatoModel, parameters: { callback: "toShow" } });
            this.createHatoView.render();
        },

        getHatoEdit: function(hato){
            this.hatoModel = new app.HatoModel();
            this.hatoModel.set({'id': hato},{silent: true});
                if( this.createHatoView instanceof Backbone.View){
                    this.createHatoView.stopListening();
                    this.createHatoView.undelegateEvents();
                }
                this.createHatoView = new app.CreateHatoView({ model: this.hatoModel, parameters: {callback: 'toShow'}});
                this.hatoModel.fetch();
        },

        //Modulo Lotes

        getLoteMain: function(){
           if (this.mainLoteView instanceof Backbone.View){
               this.mainLoteView.stopListening();
               this.mainLoteView.undelegateEvents();
           }
           this.mainLoteView = new app.MainLoteView();
       },

        getLoteCreate: function(){
           this.loteModel = new app.LoteModel();
           if(this.createLoteView instanceof Backbone.View){
               this.createLoteView.stopListening();
               this.createLoteView.undelegateEvents();
           }
           this.createLoteView = new app.CreateLoteView({ model: this.loteModel, parameters: { callback: "toShow" } });
           this.createLoteView.render();
       },

       getLoteEdit: function(lote){
           this.loteModel = new app.LoteModel();
           this.loteModel.set({'id': lote},{silent: true});
               if( this.createLoteView instanceof Backbone.View){
                   this.createLoteView.stopListening();
                   this.createLoteView.undelegateEvents();
               }
               this.createLoteView = new app.CreateLoteView({ model: this.loteModel, parameters: {callback: 'toShow'}});
               this.loteModel.fetch();
       },

       //Modulo Animal
       getAnimalMain: function(){
            if(this.mainAnimalView instanceof Backbone.View){
                this.mainAnimalView.stopListening();
                this.mainAnimalView.undelegateEvents();
            }
            this.mainAnimalView = new app.MainAnimalView();
       },

         getAnimalCreate: function(){
            this.animalModel = new app.AnimalModel();
            if(this.createAnimalView instanceof Backbone.View){
                this.createAnimalView.stopListening();
                this.createAnimalView.undelegateEvents();
            }
            this.createAnimalView = new app.CreateAnimalView({ model: this.animalModel, parameters: { callback: "toShow" } });
            this.createAnimalView.render();
        },

        getAnimalEdit: function(animal){
            this.animalModel = new app.AnimalModel();
            this.animalModel.set({'id': animal},{silent: true});
                if( this.createAnimalView instanceof Backbone.View){
                    this.createAnimalView.stopListening();
                    this.createAnimalView.undelegateEvents();
                }
                this.createAnimalView = new app.CreateAnimalView({ model: this.animalModel, parameters: {callback: 'toShow'}});
                this.animalModel.fetch();
        }

    }));

})(jQuery, this, this.document);
/**
 * Utilities for seg component
 *
 *
 */
( function( $, window, document, undefined ){

    var Misc = function( a ){

        // attributes or global vars here

    }

    Misc.prototype = {

        /**
        * Inializes the functions when DOM ready
        */
        initialize: function(){

        },

        /**
         *  Serialize form into json format
         *
         *  @param { string } name class or id of the html element to embed the loader
         *  @return { object } form into json
         *
         */

        formToJson: function( selector ){
            var o = {}, a = [];
            if( $.prototype.isPrototypeOf(selector) ){
                a = selector.serializeArray();
            }
            else{
                a = $(selector).serializeArray();
            }

            $.each( a, function() {
                if ( o[ this.name ] !== undefined ) {
                    if ( ! o[this.name].push ) {
                        o[ this.name ] = [ o[ this.name ] ];
                    }

                    o[ this.name ].push( this.value || '' );

                } else {
                    o[ this.name ] = this.value || '';
                }
            });

            return o;
        },

        /**
        * validate the urls
        */
        isUrl : function( str ){

            // var patt = /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+\.[a-zA-Z]{2,3}(\/([^\n\r\s])*)?(\?([^\n\r\s])*)?/i;
            var patt = /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+(\/(.)*)?(\?(.)*)?/i;

            return patt.test( str );
        },

        /**
        * Build URI with route and base url
        */
        urlFull: function ( route ){

            if( !this.isUrl(document.url) )
                return route;

            route || (route = '');
            var patt = /^\//;
            patt.test(route) || (route = '/'+route);

            return document.url + route;
        },

        /**
        * Build URI with route and base url
        */
        parseErrors: function ( errors ){
            var text = '';
            if( _.isObject( errors ) ){

                var listError = '<ul>';

                $.each(errors, function(field, item) {
                     listError += '<li>'+ item[0] +'</li>';
                });
                listError += '</ul>';

                text = listError;
            }
            return text;
        },

        /**
        *  Sets a loading spinner in a box
        * @param { selector } String|Object Selector jQuery
        */
        setSpinner: function( selector ){
            if ( !selector ) return;

            $(selector).prepend('<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>');
        },

        /**
        * Removes the loading spinner and trigger a callback
        * @param { wrap } String|Object wrapper jQuery element
        *
        */
        removeSpinner: function( selector ){

            var $selector = $(selector).find( '.overlay' );

            if($selector.length)
                $selector.remove();
        },

        /**
        * Display the DataTables interface in Spanish
        */
        dataTableES: function(){
            return {
                "sProcessing":     "<div class=\"overlay\"><i class=\"fa fa-refresh fa-spin\"></i></div>",
                "sLengthMenu":     "Mostrar _MENU_ registros",
                "sZeroRecords":    "No se encontraron resultados",
                "sEmptyTable":     "Ningún dato disponible en esta tabla",
                "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix":    "",
                "sSearch":         "Buscar:",
                "sUrl":            "",
                "sInfoThousands":  ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst":    "Primero",
                    "sLast":     "Último",
                    "sNext":     "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                }
            }
        },

        /**
        * Redirect to an specific url or refresh the page
        * @param { string } the url to be redirect to
        *
        */
        redirect: function( url ){
            if( url !== undefined && url != ''){
                window.location = url;
            }else{
                window.location.reload();
            }
        },

        /**
        * Redirect to an specific url or refresh the page
        * @param { string } the url to be redirect to
        *
        */
        successRedirect: function( msg, url ){
            alertify.success(msg);
            setTimeout(function(){
                window.Misc.redirect( url );
            }, 500);
        },

        /**
        * Format COP currency
        * @param { value }
        *
        */
        currency: function( value ){
            return accounting.formatMoney(value, '', 2, ".", ",");
        }
    };

    window.Misc = new Misc();
    window.Misc.initialize();

})( jQuery, this, this.document );

(function () {

    var laroute = (function () {

        var routes = {

            absolute: false,
            rootUrl: 'http://localhost',
            routes : [{"host":null,"methods":["GET","HEAD"],"uri":"login","name":"login","action":"App\Http\Controllers\Auth\AuthController@getLogin"},{"host":null,"methods":["GET","HEAD"],"uri":"logout","name":"logout","action":"App\Http\Controllers\Auth\AuthController@getLogout"},{"host":null,"methods":["POST"],"uri":"login","name":"auth.login","action":"App\Http\Controllers\Auth\AuthController@postLogin"},{"host":null,"methods":["GET","HEAD"],"uri":"\/","name":"dashboard","action":"App\Http\Controllers\HomeController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"especies","name":"especies.index","action":"App\Http\Controllers\EspeciesController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"especies\/create","name":"especies.create","action":"App\Http\Controllers\EspeciesController@create"},{"host":null,"methods":["POST"],"uri":"especies","name":"especies.store","action":"App\Http\Controllers\EspeciesController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"especies\/{especies}","name":"especies.show","action":"App\Http\Controllers\EspeciesController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"especies\/{especies}\/edit","name":"especies.edit","action":"App\Http\Controllers\EspeciesController@edit"},{"host":null,"methods":["PUT"],"uri":"especies\/{especies}","name":"especies.update","action":"App\Http\Controllers\EspeciesController@update"},{"host":null,"methods":["PATCH"],"uri":"especies\/{especies}","name":null,"action":"App\Http\Controllers\EspeciesController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"razas","name":"razas.index","action":"App\Http\Controllers\RazasController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"razas\/create","name":"razas.create","action":"App\Http\Controllers\RazasController@create"},{"host":null,"methods":["POST"],"uri":"razas","name":"razas.store","action":"App\Http\Controllers\RazasController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"razas\/{razas}","name":"razas.show","action":"App\Http\Controllers\RazasController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"razas\/{razas}\/edit","name":"razas.edit","action":"App\Http\Controllers\RazasController@edit"},{"host":null,"methods":["PUT"],"uri":"razas\/{razas}","name":"razas.update","action":"App\Http\Controllers\RazasController@update"},{"host":null,"methods":["PATCH"],"uri":"razas\/{razas}","name":null,"action":"App\Http\Controllers\RazasController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"hato","name":"hato.index","action":"App\Http\Controllers\HatoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"hato\/create","name":"hato.create","action":"App\Http\Controllers\HatoController@create"},{"host":null,"methods":["POST"],"uri":"hato","name":"hato.store","action":"App\Http\Controllers\HatoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"hato\/{hato}","name":"hato.show","action":"App\Http\Controllers\HatoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"hato\/{hato}\/edit","name":"hato.edit","action":"App\Http\Controllers\HatoController@edit"},{"host":null,"methods":["PUT"],"uri":"hato\/{hato}","name":"hato.update","action":"App\Http\Controllers\HatoController@update"},{"host":null,"methods":["PATCH"],"uri":"hato\/{hato}","name":null,"action":"App\Http\Controllers\HatoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"lote","name":"lote.index","action":"App\Http\Controllers\LoteController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"lote\/create","name":"lote.create","action":"App\Http\Controllers\LoteController@create"},{"host":null,"methods":["POST"],"uri":"lote","name":"lote.store","action":"App\Http\Controllers\LoteController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"lote\/{lote}","name":"lote.show","action":"App\Http\Controllers\LoteController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"lote\/{lote}\/edit","name":"lote.edit","action":"App\Http\Controllers\LoteController@edit"},{"host":null,"methods":["PUT"],"uri":"lote\/{lote}","name":"lote.update","action":"App\Http\Controllers\LoteController@update"},{"host":null,"methods":["PATCH"],"uri":"lote\/{lote}","name":null,"action":"App\Http\Controllers\LoteController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"animal","name":"animal.index","action":"App\Http\Controllers\AnimalController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"animal\/create","name":"animal.create","action":"App\Http\Controllers\AnimalController@create"},{"host":null,"methods":["POST"],"uri":"animal","name":"animal.store","action":"App\Http\Controllers\AnimalController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"animal\/{animal}","name":"animal.show","action":"App\Http\Controllers\AnimalController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"animal\/{animal}\/edit","name":"animal.edit","action":"App\Http\Controllers\AnimalController@edit"},{"host":null,"methods":["PUT"],"uri":"animal\/{animal}","name":"animal.update","action":"App\Http\Controllers\AnimalController@update"},{"host":null,"methods":["PATCH"],"uri":"animal\/{animal}","name":null,"action":"App\Http\Controllers\AnimalController@update"}],
            prefix: '',

            route : function (name, parameters, route) {
                route = route || this.getByName(name);

                if ( ! route ) {
                    return undefined;
                }

                return this.toRoute(route, parameters);
            },

            url: function (url, parameters) {
                parameters = parameters || [];

                var uri = url + '/' + parameters.join('/');

                return this.getCorrectUrl(uri);
            },

            toRoute : function (route, parameters) {
                var uri = this.replaceNamedParameters(route.uri, parameters);
                var qs  = this.getRouteQueryString(parameters);

                return this.getCorrectUrl(uri + qs);
            },

            replaceNamedParameters : function (uri, parameters) {
                uri = uri.replace(/\{(.*?)\??\}/g, function(match, key) {
                    if (parameters.hasOwnProperty(key)) {
                        var value = parameters[key];
                        delete parameters[key];
                        return value;
                    } else {
                        return match;
                    }
                });

                // Strip out any optional parameters that were not given
                uri = uri.replace(/\/\{.*?\?\}/g, '');

                return uri;
            },

            getRouteQueryString : function (parameters) {
                var qs = [];
                for (var key in parameters) {
                    if (parameters.hasOwnProperty(key)) {
                        qs.push(key + '=' + parameters[key]);
                    }
                }

                if (qs.length < 1) {
                    return '';
                }

                return '?' + qs.join('&');
            },

            getByName : function (name) {
                for (var key in this.routes) {
                    if (this.routes.hasOwnProperty(key) && this.routes[key].name === name) {
                        return this.routes[key];
                    }
                }
            },

            getByAction : function(action) {
                for (var key in this.routes) {
                    if (this.routes.hasOwnProperty(key) && this.routes[key].action === action) {
                        return this.routes[key];
                    }
                }
            },

            getCorrectUrl: function (uri) {
                var url = this.prefix + '/' + uri.replace(/^\/?/, '');

                if(!this.absolute)
                    return url;

                return this.rootUrl.replace('/\/?$/', '') + url;
            }
        };

        var getLinkAttributes = function(attributes) {
            if ( ! attributes) {
                return '';
            }

            var attrs = [];
            for (var key in attributes) {
                if (attributes.hasOwnProperty(key)) {
                    attrs.push(key + '="' + attributes[key] + '"');
                }
            }

            return attrs.join(' ');
        };

        var getHtmlLink = function (url, title, attributes) {
            title      = title || url;
            attributes = getLinkAttributes(attributes);

            return '<a href="' + url + '" ' + attributes + '>' + title + '</a>';
        };

        return {
            // Generate a url for a given controller action.
            // Route.action('HomeController@getIndex', [params = {}])
            action : function (name, parameters) {
                parameters = parameters || {};

                return routes.route(name, parameters, routes.getByAction(name));
            },

            // Generate a url for a given named route.
            // Route.route('routeName', [params = {}])
            route : function (route, parameters) {
                parameters = parameters || {};

                return routes.route(route, parameters);
            },

            // Generate a fully qualified URL to the given path.
            // Route.route('url', [params = {}])
            url : function (route, parameters) {
                parameters = parameters || {};

                return routes.url(route, parameters);
            },

            // Generate a html link to the given url.
            // Route.link_to('foo/bar', [title = url], [attributes = {}])
            link_to : function (url, title, attributes) {
                url = this.url(url);

                return getHtmlLink(url, title, attributes);
            },

            // Generate a html link to the given route.
            // Route.link_to_route('route.name', [title=url], [parameters = {}], [attributes = {}])
            link_to_route : function (route, title, parameters, attributes) {
                var url = this.route(route, parameters);

                return getHtmlLink(url, title, attributes);
            },

            // Generate a html link to the given controller action.
            // Route.link_to_action('HomeController@getIndex', [title=url], [parameters = {}], [attributes = {}])
            link_to_action : function(action, title, parameters, attributes) {
                var url = this.action(action, parameters);

                return getHtmlLink(url, title, attributes);
            }

        };

    }).call(this);

    /**
     * Expose the class either via AMD, CommonJS or the global object
     */
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return laroute;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = laroute;
    }
    else {
        window.Route = laroute;
    }

}).call(this);


/**
* Init Class
*/

/*global*/
var app = app || {};

(function ($, window, document, undefined) {

    var InitComponent = function(){

        //Init Attributes
        $.ajaxSetup({
            cache: false,
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        });
    }

    InitComponent.prototype = {

        /**
        * Constructor or Initialize Method
        */
        initialize: function () {
            //Initialize
            this.initApp();
            this.initDatePicker();
        },

        /**
        * Init Backbone Application
        */
        initApp: function () {
            window.app.AppRouter.start();
        },

        initDatePicker: function () {

            $('.datepicker').datepicker({
                autoclose: true,
                language: 'es',
                format: 'yyyy-mm-dd'
            });
        },
    };

    //Init App Components
    //-----------------------
    $(function() {
        window.initComponent = new InitComponent();
        window.initComponent.initialize();
    });

})(jQuery, this, this.document);

//# sourceMappingURL=app.min.js.map
